# docopt
' bin_stats v1.0
Compute BAM stats by bin

Usage:
    bin_stats_bedpe.R -i INPUT -g GENOME -o OUTDIR [ --bsgchr BSGCHR --winsize WINDOWSIZE ]

Options:
    -i --input INPUT        Path to cleaned BEDPE4MEDREMIX file (full path)
    -g --genome GENOME      Either the name of BSgenome (usually BSgenome.Hsapiens.UCSC.hg38
                                or BSgenome.Athaliana.TAIR.TAIR9), or the path to a folder
                                containing a custom BSgenome as a package, which will be loaded
                                using devtools::load_all()
    -o --outdir OUTDIR      Directory to output bin_stats file per chromosome

    --bsgchr BSGCHR         If CHROM does not match the corresponding chromosome name in BSgenome,
                                provide here the actual name of the corresponding BSgenome chromosome
    --winsize WINDOWSIZE    Window size

' -> doc

## --filtered FILTERED     Path to dump reads that were filted out of the analysis
## currently not yet supported

# library
if (! interactive()) {
    suppressMessages(library(docopt))
    args <- docopt(doc, version='Bin Stats v1.0')
    print(args)
} else {
    message('Running in interactive mode. Be sure to specify args manually.')
}
suppressMessages(library(arrow))
suppressMessages(library(GenomicRanges))
suppressMessages(library(BSgenome))
suppressMessages(library(Rsamtools))
suppressMessages(library(S4Vectors))
suppressMessages(library(data.table))
suppressMessages(library(plyr))
suppressMessages(library(tidyverse))
suppressMessages(library(doParallel))

# args = list()
# args[['input']] = "/Users/minghan/bioinfoproj/PughLabPMH/_projects/MedRemix_bedpe9/GSM5067062_2020_6544_human_bedpe.1000lines.bed.gz"
# args[['genome']] = "/Users/minghan/bioinfoproj/references/BSgenome.Hsapiens.UCSC.hg38"
# args[['outdir']] = "/Users/minghan/bioinfoproj/PughLabPMH/_projects/MedRemix_bedpe9/outputs/bin_stats"
# print(args)

sample_name = basename(args[['input']]) %>% gsub(".bed.gz", "", .)

if (!is.null(args[['winsize']])) {
    BIN_WIDTH = args[['winsize']] %>% as.integer()
} else {
    BIN_WIDTH = 300
}

FRAGMENT_LENGTH_LIMIT = 500

if (file.exists(paste(args[['genome']], 'DESCRIPTION', sep='/'))) {
    devtools::load_all(args[['genome']])
    bsgenome <- getBSgenome(basename(args[['genome']]))
} else {
    bsgenome <- getBSgenome(args[['genome']])
}

# if (!is.null(args[['bsgchr']])) {
#     stopifnot(args[['bsgchr']] %in% seqnames(bsgenome))
#     bsgenome_chr = args[['bsgchr']]
# } else {
#     bsgenome_chr = args[['chrom']]
# }


## bin_stats parallelized ################################

# read in bedpe4medremix file
message(paste0("Reading in bedpe4medremix file: ", args[['input']]))
fragments_tibble_limited =
  data.table::fread(file = args[['input']], sep = '\t') %>%
  as_tibble() %>% 
  dplyr::rename("seqnames" = "V1", "mateid" = "V2", "paired_end_reads" = "V3", "start" = "V4",
                "end" = "V5", "width" = "V6", "mean_mapq" = "V7")
#fragments_tibble_limited %>% head()
#seqnames mateid paired_end_reads    start      end width mean_mapq
#1     chr2      0                0 65125872 65126003   131         0
#2    chr18      0                0 36253731 36253951   220         0
#3    chr18      0                0 36253731 36253951   220         0


registerDoParallel()

# chr_arr = paste0("chr", c(seq(1,2), "X", "Y"))
chr_arr = paste0("chr", c(seq(1,22), "X", "Y"))
# data.frame(chr_arr)
# z = list()
# z$chr_arr = "chr1"

message('bin_stats for each chromosome...')
plyr::ddply(.data = data.frame(chr_arr),
            .variables = 'chr_arr',
            .fun = function(z) {

              chrom_length <- length(bsgenome[[z$chr_arr]])
              bins = GRanges(
                seqnames = z$chr_arr,
                ranges = IRanges(
                  start = seq(1, chrom_length, BIN_WIDTH),
                  end = c(seq(BIN_WIDTH, chrom_length, BIN_WIDTH), chrom_length)
                )
              )
              # bins %>% head()
              # GRanges object with 6 ranges and 0 metadata columns:
              #   seqnames    ranges strand
              # <Rle> <IRanges>  <Rle>
              #   [1]     chr1     1-300      *
              #   [2]     chr1   301-600      *
              #   [3]     chr1   601-900      *

              # find overlaps with bins
              fragments_tibble_chr = fragments_tibble_limited %>% dplyr::filter(seqnames == z$chr_arr)
              fragment_bin_overlaps <- findOverlaps(GRanges(fragments_tibble_chr), bins)
              # fragment_bin_overlaps

              bsgenome_chr = z$chr_arr

              bin_coverage <-
                dplyr::bind_cols(
                  fragments_tibble_limited[queryHits(fragment_bin_overlaps), ],
                  bins[subjectHits(fragment_bin_overlaps)] %>%
                    as_tibble %>%
                    dplyr::rename(bin_chr = seqnames, bin_start = start, bin_end = end) %>%
                    select(-width)
                ) %>%
                dplyr::mutate(
                  overlap_length = pmin(end, bin_end) - pmax(start, bin_start) + 1
                ) %>%
                dplyr::group_by(bin_chr, bin_start, bin_end) %>%
                dplyr::summarise(
                  n_fragments = n(),
                  coverage_bp = sum(overlap_length),
                  mean_fragment_length = mean(width),
                  mean_fragment_mapq = mean(mean_mapq)
                ) %>%
                dplyr::ungroup() %>%
                dplyr::right_join(
                  bins %>%
                    as_tibble %>%
                    select(seqnames, start, end),
                  by = c('bin_chr' = 'seqnames', 'bin_start' = 'start', 'bin_end' = 'end')
                ) %>%
                tidyr::replace_na(list(
                  n_fragments = 0,
                  coverage_bp = 0
                )) %>%
                dplyr::arrange(bin_chr, bin_start) %>%
                dplyr::mutate(mean_coverage = coverage_bp / BIN_WIDTH) %>%
                dplyr::mutate(
                  seq = getSeq(
                    bsgenome,
                    names = rep(bsgenome_chr, n()),
                    start = bin_start,
                    end = bin_end
                  ) %>% as.character
                ) %>%
                dplyr::mutate(
                  known_bps = str_count(seq, '[TCGA]'),
                  gc_content = str_count(seq, '[GC]') / ifelse(known_bps == 0.0, 1.0, known_bps),
                  cpg_count = str_count(seq, 'CG'),
                ) %>%
                dplyr::select(-known_bps, -seq)
              # bin_coverage %>% dplyr::filter(n_fragments != 0) %>% head()

              bin_coverage %>%
                write_tsv(
                  file.path(args[['outdir']], paste0("bedpe_bin_stats_", sample_name, "_", z$chr_arr, ".tsv")),
                  append = FALSE,
                  col_names = TRUE
                )

              if (!is.null(args[['filtered']])) {
                filtered_reads %>% write_tsv(args[['filtered']])
              }

            })


# EOF
